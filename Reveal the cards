class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
        int n = deck.size();
        if (n == 0) return deck;
        
        sort(deck.begin(), deck.end(), greater<int>());
        queue<int> q;
        for (int i = 0; i < n; i++) {
            //jb tk the queue not become empty do the needful
            //make enter the front element from the first to give the result back
            if (!q.empty()) {
                q.push(q.front());
                q.pop();
            }
            //enter the result
            q.push(deck[i]);
        }
        //use the result and jb tk queue empty nhi ho jaati push the front part into the queue
        vector<int> result;
        while (!q.empty()) {
            result.push_back(q.front());
            q.pop();
        }
        // reverse kr do
        reverse(result.begin(), result.end());
        return result;
    }
};
